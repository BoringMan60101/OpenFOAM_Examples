/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2306                                  |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volScalarField;
    object      T;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 0 0 1 0 0 0]; // Размерность поля 'T'

// С помощью codeStream значения в начальный момент времени
// Будут вычислены во время запуска расчетов
internalField   #codeStream
{
    codeInclude
    #{
		#include "fvCFD.H" // Подключение основного заголовочного файла
    #};

    codeOptions
    #{
		// Добавление новых путей для поиска подключаемых файлов при компиляции
		-I$(LIB_SRC)/finiteVolume/lnInclude \
		-I$(LIB_SRC)/meshTools/lnInclude
    #};

    codeLibs
    #{
		-lmeshTools \
		-lfiniteVolume
    #};

	// Код C++, с помощью которого буду вычислены начальные условия
    code
    #{
		// 'dict' это ООП объект, который представляет данный словарь (этот файл)
		// у объекта 'dict' есть метод, дающий доступ к базе данных
		// из этой базы данных можно получить информацию о сетке (объект 'mesh')
		const fvMesh& mesh = refCast<const fvMesh>(dict.db());

		// scalarField - список скалярных значений
        // При его создании указывается размер списка, равный количеству ячеек в сетке
		scalarField T(mesh.nCells());

		// 'CC' - список векторных значений центров ячеек
		const vectorField& CC = mesh.C();

		forAll(CC, i) // Цикл по всем центрам ячеек
		{
			scalar x = CC[i].x(); // 'X' - координата очередной точки
			scalar y = CC[i].y(); // 'Y' - координата очередной точки
			scalar z = CC[i].z(); // 'Z' - координата очередной точки

			// Формула, определяющая поле 'T' в начальный момент времени
	    	T[i] = x + Foam::cos(y) + Foam::exp(z);
		}

		T.writeEntry("", os); // Оператор записи вычисленных значений
    #};
};


// Граничные условя (первого рода, равномерные и нулевые)
boundaryField
{
    boundaryRegion // Имя граничной области (см. файл blockMeshDict)
    {
        type            fixedValue;
        value			uniform 0.0;
    }
}


// ************************************************************************* //
